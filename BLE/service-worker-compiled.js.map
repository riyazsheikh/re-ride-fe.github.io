{"version":3,"sources":["service-worker.js"],"names":[],"mappings":";;AAAA,KAAK,gBAAL,CAAsB,OAAtB,EAA+B,UAAS,KAAT,EAAgB;AAC7C,MAAM,UAAU,MAAM,OAAtB;AACA,MAAM,MAAM,IAAI,GAAJ,CAAQ,MAAM,OAAN,CAAc,GAAtB,CAAZ;;AAEA;AACA,MAAI,IAAI,MAAJ,KAAe,SAAS,MAA5B,EAAoC;AAClC;AACD;;AAED,QAAM,WAAN,CAAkB,OAAO,IAAP,CAAY,eAAZ,EAA6B,IAA7B,CAAkC,iBAAS;AAC3D,WAAO,MAAM,KAAN,CAAY,OAAZ,EAAqB,IAArB,CAA0B,oBAAY;AAC3C,UAAI,eAAe,MAAM,OAAN,EAAe,IAAf,CAAoB,2BAAmB;AACxD,cAAM,GAAN,CAAU,OAAV,EAAmB,gBAAgB,KAAhB,EAAnB;AACA,eAAO,eAAP;AACD,OAHkB,CAAnB;AAIA;AACA,aAAO,YAAY,YAAnB;AACD,KAPM,CAAP;AAQD,GATiB,CAAlB;AAUD,CAnBD","file":"service-worker-compiled.js","sourcesContent":["self.addEventListener('fetch', function(event) {\n  const request = event.request;\n  const url = new URL(event.request.url);\n\n  // Don't cache anything that is not on this origin.\n  if (url.origin !== location.origin) {\n    return;\n  }\n\n  event.respondWith(caches.open('web-bluetooth').then(cache => {\n    return cache.match(request).then(response => {\n      var fetchPromise = fetch(request).then(networkResponse => {\n        cache.put(request, networkResponse.clone());\n        return networkResponse;\n      });\n      // Return the response from cache or wait for network.\n      return response || fetchPromise;\n    });\n  }));\n});\n"]}